from aiogram import Bot, F, Router, html
from aiogram.types import CallbackQuery, Message
from asgiref.sync import sync_to_async
from telegram_bot.eduutils.edu_utils_db import (
    get_student_confidential_data,
    get_student_send_personal_data,
    get_student_send_schedule,
    student_send_schedule_reminder,
)
from telegram_bot.filters.filter import AuthenticationStudentFilter
from telegram_bot.keyboards.student_keyboard import (
    inline_keyboard_backward,
    inline_keyboard_panel,
)
from telegram_bot.loader import bot, scheduler

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —É—á–µ–Ω–∏–∫–æ–≤
student_handler = Router()

# –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤
student_handler.message(AuthenticationStudentFilter())

# –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –≤—Å–µ—Ö –∫–æ–ª–ª–±—ç–∫–æ–≤ –æ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤
student_handler.callback_query(AuthenticationStudentFilter())


@student_handler.message(F.text == "/panel")
async def cmd_panel_student(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "/panel" –¥–ª—è –æ–±—É—á–∞—é—â–∏—Ö—Å—è.

    –£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞–Ω–µ–ª—å—é –æ–±—É—á–∞—é—â–µ–≥–æ—Å—è.

    Args:
        message (Message): –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

    Returns:
        None
    """
    await message.delete()
    await message.answer(
        text="–ü–∞–Ω–µ–ª—å –æ–±—É—á–∞—é—â–µ–≥–æ—Å—è",
        reply_markup=inline_keyboard_panel,
        protect_content=True,
    )


@student_handler.callback_query(F.data.in_("student_send_personal_data"))
async def student_send_personal_data(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–±—É—á–∞—é—â–µ–≥–æ—Å—è.

    Args:
        callback (CallbackQuery): –û–±—ä–µ–∫—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞.

    Returns:
        None
    """
    personal_data = await sync_to_async(get_student_send_personal_data)(
        callback.from_user.id
    )

    entities = (
        callback.message.entities or []
    )  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
    for item in entities:
        if item.type in personal_data.keys():
            personal_data[item.type] = item.extract_from(
                callback.message.text
            )  # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ —Å—É—â–Ω–æ—Å—Ç–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è

    await callback.message.edit_text(
        f'üìπ –î–∞–Ω–Ω—ã–µ —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏\n'
        f'–£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID: {html.quote(str(personal_data["id"]))}\n'
        f'–õ–æ–≥–∏–Ω: {html.quote(str(personal_data["login"]))}\n'
        f'–ü–∞—Ä–æ–ª—å: {html.quote(str(personal_data["password"]))}\n'
        f'–§–ò–û: {html.quote(str(personal_data["full_name"]))}\n'
        f'–¢–µ–ª–µ–≥—Ä–∞–º ID: {html.quote(str(personal_data["telegram_id"]))}\n'
        f'–°—Ç–∞—Ç—É—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {html.quote(str(personal_data["is_authentication"]))}\n',
        reply_markup=inline_keyboard_backward,
    )

    await callback.answer()


@student_handler.callback_query(F.data.in_("student_send_confidential_data"))
async def student_send_confidential_data(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–±—É—á–∞—é—â–µ–≥–æ—Å—è.

    Args:
        callback (CallbackQuery): –û–±—ä–µ–∫—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞.

    Returns:
        None
    """
    confidential_data = await sync_to_async(get_student_confidential_data)(
        callback.from_user.id
    )

    entities = (
        callback.message.entities or []
    )  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
    for item in entities:
        if item.type in confidential_data.keys():
            confidential_data[item.type] = item.extract_from(
                callback.message.text
            )  # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ —Å—É—â–Ω–æ—Å—Ç–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è

    await callback.message.edit_text(
        f'üìπ –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n'
        f'–§–ò–û –†–æ–¥–∏—Ç–µ–ª—è: {html.quote(str(confidential_data["parent_full_name"]))}\n'
        f'–ú–µ—Å—Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–æ–¥–∏—Ç–µ–ª—è: {html.quote(str(confidential_data["parent_residential_adress"]))}\n'
        f'–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {html.quote(str(confidential_data["date_birth"]))}\n'
        f'14-–∏–π –≤–æ–∑—Ä–∞—Å—Ç: {html.quote(str(confidential_data["if_fourteen"]))}\n'
        f'–ê–¥—Ä–µ—Å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è: {html.quote(str(confidential_data["student_residential_adress"]))}\n'
        f'–ü–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {html.quote(str(confidential_data["passport_data"]))}\n'
        f'–ö–µ–º –≤—ã–¥–∞–Ω –ø–∞—Å–ø–æ—Ä—Ç: {html.quote(str(confidential_data["passport_data_issued_by"]))}\n'
        f'–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏ –ø–∞—Å–ø–æ—Ä—Ç–∞: {html.quote(str(confidential_data["passport_data_date_of_issue—Å"]))}\n'
        f'–£—á–µ–±–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {html.quote(str(confidential_data["name_education_organization"]))}\n'
        f'–ù–æ–º–µ—Ä —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {html.quote(str(confidential_data["certificate_number"]))}\n'
        f'–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–æ–¥–∏—Ç–µ–ª—è: {html.quote(str(confidential_data["parent_contact"]))}\n'
        f'–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—á–µ–Ω–∏–∫–∞: {html.quote(str(confidential_data["student_contact"]))}\n'
        f'–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {html.quote(str(confidential_data["medical_restrictions"]))}\n'
        f'–î–∞—Ç–∞ –∑–∞–∫–ª—é—á–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: {html.quote(str(confidential_data["date_contract"]))}\n',
        reply_markup=inline_keyboard_backward,
    )
    await callback.answer()


@student_handler.callback_query(F.data.in_("student_send_schedule"))
async def student_send_schedule(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π –æ–±—É—á–∞—é—â–µ–≥–æ—Å—è.

    Args:
        callback (CallbackQuery): –û–±—ä–µ–∫—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞.

    Returns:
        None
    """
    scheduele = await sync_to_async(get_student_send_schedule)(callback.from_user.id)
    if scheduele:
        await callback.message.answer(text="\n".join(str(item) for item in scheduele))
    else:
        await callback.message.answer(
            text="–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π"
        )

    await callback.answer()


async def notifying_student(bot: Bot):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–±—É—á–∞—é—â–∏—Ö—Å—è –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–Ω—è—Ç–∏—è—Ö.

    Args:
        bot (Bot): –û–±—ä–µ–∫—Ç –±–æ—Ç–∞.

    Returns:
        None
    """
    reminder = await sync_to_async(student_send_schedule_reminder)()

    for telegram_id, schedulers in reminder.items():
        if schedulers:
            for scheduler in schedulers:
                await bot.send_message(chat_id=telegram_id, text=scheduler)

scheduler.add_job(
    notifying_student, 
    "interval",
    seconds=60, 
    kwargs={"bot": bot}
)


@student_handler.callback_query(F.data.in_("student_inline_keyboard_backward"))
async def student_inline_keyboard_backward(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –º–µ–Ω—é –æ–±—É—á–∞—é—â–µ–≥–æ—Å—è.

    Args:
        callback (CallbackQuery): –û–±—ä–µ–∫—Ç –∫–æ–ª–±—ç–∫–∞.

    Returns:
        None
    """
    await callback.message.edit_text(
        text="–ü–∞–Ω–µ–ª—å –æ–±—É—á–∞—é—â–µ–≥–æ—Å—è", reply_markup=inline_keyboard_panel
    )
    await callback.answer()


@student_handler.callback_query(F.data.in_("student_panel_cancel"))
async def student_panel_cancel(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –ø–∞–Ω–µ–ª–∏ –æ–±—É—á–∞—é—â–µ–≥–æ—Å—è.

    Args:
        callback (CallbackQuery): –û–±—ä–µ–∫—Ç –∫–æ–ª–±—ç–∫–∞.

    Returns:
        None
    """
    await callback.message.delete()
    await callback.answer()
